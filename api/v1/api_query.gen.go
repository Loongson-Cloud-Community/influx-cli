/*
 * Influx API Service (V1 compatible endpoints)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	_gzip "compress/gzip"
	_context "context"
	_io "io"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

type QueryApi interface {

	/*
	 * GetQueryV1 Query InfluxDB in a V1 compatible format
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiGetQueryV1Request
	 */
	GetQueryV1(ctx _context.Context) ApiGetQueryV1Request

	/*
	 * GetQueryV1Execute executes the request
	 * @return string
	 */
	GetQueryV1Execute(r ApiGetQueryV1Request) (string, error)
}

// queryApiGzipReadCloser supports streaming gzip response-bodies directly from the server.
type queryApiGzipReadCloser struct {
	underlying _io.ReadCloser
	gzip       _io.ReadCloser
}

func (gzrc *queryApiGzipReadCloser) Read(p []byte) (int, error) {
	return gzrc.gzip.Read(p)
}
func (gzrc *queryApiGzipReadCloser) Close() error {
	if err := gzrc.gzip.Close(); err != nil {
		return err
	}
	return gzrc.underlying.Close()
}

// QueryApiService QueryApi service
type QueryApiService service

type ApiGetQueryV1Request struct {
	ctx            _context.Context
	ApiService     QueryApi
	zapTraceSpan   *string
	u              *string
	p              *string
	db             *string
	accept         *InfluxQLContentType
	acceptEncoding *string
	contentType    *string
	q              *string
}

func (r ApiGetQueryV1Request) ZapTraceSpan(zapTraceSpan string) ApiGetQueryV1Request {
	r.zapTraceSpan = &zapTraceSpan
	return r
}
func (r ApiGetQueryV1Request) GetZapTraceSpan() *string {
	return r.zapTraceSpan
}

func (r ApiGetQueryV1Request) U(u string) ApiGetQueryV1Request {
	r.u = &u
	return r
}
func (r ApiGetQueryV1Request) GetU() *string {
	return r.u
}

func (r ApiGetQueryV1Request) P(p string) ApiGetQueryV1Request {
	r.p = &p
	return r
}
func (r ApiGetQueryV1Request) GetP() *string {
	return r.p
}

func (r ApiGetQueryV1Request) Db(db string) ApiGetQueryV1Request {
	r.db = &db
	return r
}
func (r ApiGetQueryV1Request) GetDb() *string {
	return r.db
}

func (r ApiGetQueryV1Request) Accept(accept InfluxQLContentType) ApiGetQueryV1Request {
	r.accept = &accept
	return r
}
func (r ApiGetQueryV1Request) GetAccept() *InfluxQLContentType {
	return r.accept
}

func (r ApiGetQueryV1Request) AcceptEncoding(acceptEncoding string) ApiGetQueryV1Request {
	r.acceptEncoding = &acceptEncoding
	return r
}
func (r ApiGetQueryV1Request) GetAcceptEncoding() *string {
	return r.acceptEncoding
}

func (r ApiGetQueryV1Request) ContentType(contentType string) ApiGetQueryV1Request {
	r.contentType = &contentType
	return r
}
func (r ApiGetQueryV1Request) GetContentType() *string {
	return r.contentType
}

func (r ApiGetQueryV1Request) Q(q string) ApiGetQueryV1Request {
	r.q = &q
	return r
}
func (r ApiGetQueryV1Request) GetQ() *string {
	return r.q
}

func (r ApiGetQueryV1Request) Execute() (string, error) {
	return r.ApiService.GetQueryV1Execute(r)
}

/*
 * GetQueryV1 Query InfluxDB in a V1 compatible format
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetQueryV1Request
 */
func (a *QueryApiService) GetQueryV1(ctx _context.Context) ApiGetQueryV1Request {
	return ApiGetQueryV1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return string
 */
func (a *QueryApiService) GetQueryV1Execute(r ApiGetQueryV1Request) (string, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueryApiService.GetQueryV1")
	if err != nil {
		return localVarReturnValue, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.u != nil {
		localVarQueryParams.Add("u", parameterToString(*r.u, ""))
	}
	if r.p != nil {
		localVarQueryParams.Add("p", parameterToString(*r.p, ""))
	}
	if r.db != nil {
		localVarQueryParams.Add("db", parameterToString(*r.db, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/csv", "text/csv", "application/json", "application/x-msgpack"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.zapTraceSpan != nil {
		localVarHeaderParams["Zap-Trace-Span"] = parameterToString(*r.zapTraceSpan, "")
	}
	if r.accept != nil {
		localVarHeaderParams["Accept"] = parameterToString(*r.accept, "")
	}
	if r.acceptEncoding != nil {
		localVarHeaderParams["Accept-Encoding"] = parameterToString(*r.acceptEncoding, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, err
	}

	var body _io.ReadCloser = localVarHTTPResponse.Body
	if localVarHTTPResponse.Header.Get("Content-Encoding") == "gzip" {
		gzr, err := _gzip.NewReader(body)
		if err != nil {
			body.Close()
			return localVarReturnValue, err
		}
		body = &queryApiGzipReadCloser{underlying: body, gzip: gzr}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		localVarBody, err := _ioutil.ReadAll(body)
		body.Close()
		if err != nil {
			return localVarReturnValue, err
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, newErr
		}
		newErr.model = &v
		return localVarReturnValue, newErr
	}

	localVarBody, err := _ioutil.ReadAll(body)
	body.Close()
	if err != nil {
		return localVarReturnValue, err
	}
	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, newErr
	}

	return localVarReturnValue, nil
}
